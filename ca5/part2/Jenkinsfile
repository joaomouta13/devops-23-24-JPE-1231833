pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'moutaj'
        DOCKER_IMAGE = 'jenkins-image'
        PROJECT_DIR = 'ca2/part2'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code from the repository'
                git branch: 'main', url: 'https://github.com/joaomouta13/devops-23-24-JPE-1231833.git'
            }
        }
        stage('Assemble') {
            steps {
                echo 'Assembling...'
                dir("${env.PROJECT_DIR}") {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean assemble -x test'
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
                dir("${env.PROJECT_DIR}") {
                    sh './gradlew test'
                    junit 'build/test-results/test/*.xml'
                }
            }
        }
        stage('Javadoc') {
            steps {
                echo 'Generating Javadocs...'
                dir("${env.PROJECT_DIR}") {
                    sh './gradlew javadoc'
                    publishHTML(target: [
                        reportName: 'Javadoc',
                        reportDir: 'build/docs/javadoc',
                        reportFiles: 'index.html',
                        alwaysLinkToLastBuild: true,
                        keepAll: true
                    ])
                }
            }
        }
        stage('Archive') {
            steps {
                echo 'Archiving...'
                dir("${env.PROJECT_DIR}") {
                    archiveArtifacts 'build/libs/*.jar'
                }
            }
        }
        stage('Security Check') {
            steps {
                echo 'Checking for security vulnerabilities...'
                dir("${env.PROJECT_DIR}") {
                    sh 'npm audit --audit-level=high'
                    sh './gradlew dependencyCheckAnalyze'
                }
            }
        }
        stage('Publish Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    def image = docker.build("${DOCKER_IMAGE}", "${env.PROJECT_DIR}")
                    echo 'Publishing Docker image...'
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        image.push()
                    }
                }
            }
        }
    }
}
